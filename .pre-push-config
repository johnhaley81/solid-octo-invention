# Pre-push hook configuration for solid-octo-invention
# This file allows you to customize the behavior of the comprehensive pre-push git hook
# The hook runs CI-equivalent checks locally before allowing pushes

# =============================================================================
# ENABLE/DISABLE CHECKS
# =============================================================================
# Each check can be individually enabled or disabled (true/false)
# Estimated execution times are provided as guidance

# Type checking across all packages (~30-60s)
# Runs: pnpm type-check (equivalent to CI type-check job)
ENABLE_TYPE_CHECKS=true

# Linting and code formatting (~15-30s)
# Runs: pnpm lint && pnpm format:check (equivalent to CI lint job)
ENABLE_LINT_CHECKS=true

# Unit tests (~60-120s)
# Runs: pnpm test:unit (equivalent to CI test job)
ENABLE_TEST_CHECKS=true

# Build all packages (~90-180s)
# Runs: pnpm build (equivalent to CI build job)
ENABLE_BUILD_CHECKS=true

# Secret scanning with trufflehog (~5-15s)
# Scans changed files for potential secrets/credentials
ENABLE_SECRET_SCANNING=true

# =============================================================================
# PERFORMANCE OPTIMIZATIONS
# =============================================================================

# Skip dependency installation if dependencies are already up to date
# Set to true if you're confident dependencies are installed and current
# This can save 30-60s on each push but may cause issues if deps are stale
SKIP_DEPENDENCY_INSTALL=false

# Timeout for each individual check in seconds (default: 600 = 10 minutes)
# Increase this for large projects or slow environments
# Decrease to fail faster on hanging processes
CHECK_TIMEOUT=600

# =============================================================================
# BRANCH-SPECIFIC CONFIGURATION
# =============================================================================

# Skip ALL checks for specific branches (comma-separated list with glob patterns)
# Useful for emergency hotfixes, automated branches, or experimental work
# Examples:
#   SKIP_BRANCHES="hotfix/*,release/*,dependabot/*"
#   SKIP_BRANCHES="experimental/*,temp/*"
#   SKIP_BRANCHES="quick-fix"
SKIP_BRANCHES=""

# =============================================================================
# CUSTOM COMMANDS (ADVANCED)
# =============================================================================
# Override default commands with custom implementations
# Leave empty to use the standard CI-equivalent commands
# These are useful for:
# - Running subset of tests for faster feedback
# - Using different linting rules for development
# - Custom build configurations

# Custom type checking command (default: pnpm type-check)
# Example: CUSTOM_TYPE_CHECK_COMMAND="pnpm --filter backend type-check"
CUSTOM_TYPE_CHECK_COMMAND=""

# Custom linting command (default: pnpm lint && pnpm format:check)
# Example: CUSTOM_LINT_COMMAND="pnpm lint --fix"
CUSTOM_LINT_COMMAND=""

# Custom test command (default: pnpm test:unit)
# Example: CUSTOM_TEST_COMMAND="pnpm test:unit --changed"
CUSTOM_TEST_COMMAND=""

# Custom build command (default: pnpm build)
# Example: CUSTOM_BUILD_COMMAND="pnpm --filter shared build"
CUSTOM_BUILD_COMMAND=""

# =============================================================================
# USAGE EXAMPLES
# =============================================================================
# 
# Fast development mode (skip slower checks):
#   ENABLE_BUILD_CHECKS=false
#   ENABLE_TEST_CHECKS=false
#   SKIP_DEPENDENCY_INSTALL=true
#
# Emergency hotfix mode (skip all checks):
#   SKIP_BRANCHES="hotfix/*"
#
# Backend-only development:
#   CUSTOM_TYPE_CHECK_COMMAND="pnpm --filter backend type-check"
#   CUSTOM_TEST_COMMAND="pnpm --filter backend test:unit"
#   CUSTOM_BUILD_COMMAND="pnpm --filter backend build"
