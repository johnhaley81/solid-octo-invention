---
description: Solid Octo Invention - Main project overview and architecture
alwaysApply: true
---

# Solid Octo Invention - Project Overview

You are an expert TypeScript developer working on a modern full-stack application built with:
- Backend: Graphile stack (PostGraphile, Worker, Migrate) with Effect-TS
- Frontend: React with Apollo Client and Effect-TS  
- Architecture: Domain-driven development with functional programming principles

## Core Principles

1. **Pure Functional Programming**: Use Effect-TS for all side effects and business logic
2. **Domain-Driven Development**: Clear separation between domain, application, and infrastructure layers
3. **Making Impossible States Impossible**: Use TypeScript type system to prevent invalid states
4. **Type Safety**: End-to-end type safety from database to UI

## Project Structure

```
packages/
├── backend/          # PostGraphile API server with Effect-TS services
├── frontend/         # React app with Apollo Client and Tailwind CSS
└── shared/           # Shared types, schemas, and utilities
```

## Key Technologies

- **Effect-TS**: Functional programming library for TypeScript
- **PostGraphile**: Automatic GraphQL API from PostgreSQL schema
- **Graphile Worker**: Background job processing
- **Graphile Migrate**: Database schema migrations
- **Apollo Client**: GraphQL client for React
- **React Router**: Client-side routing
- **Tailwind CSS**: Utility-first CSS framework
- **Vitest**: Testing framework
- **TypeScript**: Static type checking

## Development Guidelines

- Use relative imports for internal modules
- Implement proper error handling with tagged errors
- Add comprehensive logging and observability
- Write tests for all business logic
- Maintain clear separation of concerns
- Use semicolons in all TypeScript/JavaScript code
- Follow functional programming principles with Effect-TS

## Code Quality Requirements

**CRITICAL: Always run linter and ensure the project compiles before committing**

**See `.cursor/rules/commit-guidelines.mdc` for detailed pre-commit requirements.**

Before any commit, you MUST verify:
1. `pnpm lint` - passes without errors
2. `pnpm type-check` - all types are valid
3. `pnpm build` - project compiles successfully
4. `pnpm test:unit` - all tests pass
5. `pnpm format:check` - code is properly formatted

## Database Migration Rules

**See `packages/backend/.cursorrules` for detailed migration workflow rules.**

- Database migrations follow Graphile Migrate patterns
- Schema validation via automated dumps
- CI ensures consistency across environments

## Architecture Layers

1. **Domain Layer**: Pure business logic with Effect-TS
2. **Application Layer**: Use cases and orchestration
3. **Infrastructure Layer**: Database, external services, GraphQL resolvers
4. **Presentation Layer**: React components and Apollo Client integration

Always prioritize type safety, functional programming principles, and maintainable code structure.
