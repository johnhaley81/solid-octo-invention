---
description: Backend architecture and development guidelines for PostGraphile + Effect-TS
globs: ["packages/backend/**/*"]
alwaysApply: true
---

# Backend Development Guidelines

## Architecture

The backend uses the Graphile stack with Effect-TS for functional programming:

- **PostGraphile**: Automatic GraphQL API generation from PostgreSQL schema
- **Graphile Worker**: Background job processing
- **Graphile Migrate**: Database schema management
- **Effect-TS**: Functional programming and type-safe effects

## Service Layer Pattern

All business logic should be implemented as Effect-TS services:

```typescript
import { Effect, Context } from 'effect';

// Define service interface
export interface DatabaseService {
  readonly query: (text: string, params?: unknown[]) => Effect.Effect<unknown[], DatabaseError>;
}

// Service tag for dependency injection
export const DatabaseService = Context.GenericTag<DatabaseService>('DatabaseService');

// Implementation
export const makeDatabaseService = (): DatabaseService => ({
  query: (text, params) => 
    Effect.tryPromise({
      try: () => pool.query(text, params),
      catch: (error) => new DatabaseError('Query failed', error),
    }),
});
```

## Error Handling

Use tagged errors with Effect-TS:

```typescript
export class DatabaseError extends Error {
  readonly _tag = 'DatabaseError';
  public readonly errorCause?: unknown;
  
  constructor(message: string, cause?: unknown) {
    super(message);
    this.errorCause = cause;
  }
}
```

## Database Guidelines

- Use PostgreSQL with Row Level Security (RLS)
- Implement proper indexes and constraints
- Use UUID primary keys for better distribution
- Add automatic timestamps with triggers
- Keep schema simple and focused on core domain

## 🚫 PROHIBITED PATTERNS

### REST API Endpoints
- **❌ NO REST endpoints** - All API interactions must go through GraphQL
- **❌ NO Express routes** for business logic (except health checks)
- **❌ NO custom middleware** for authentication - use PostGraphile's built-in features
- **❌ NO `/api/*` routes** - everything should be accessible via `/graphql`

### Database Schema Violations
- **❌ NO boolean columns** - use `TIMESTAMPTZ` columns instead (e.g., `email_verified_at` not `email_verified`)
- **❌ NO TEXT columns with CHECK constraints** - use PostgreSQL ENUMs for better GraphQL type generation
- **❌ NO separate migration files** - all schema changes go in `current.sql`
- **❌ NO sensitive data in public schema** - use `app_private` schema for authentication tables

### Background Processing Anti-patterns
- **❌ NO database functions for background tasks** - use graphile-worker jobs
- **❌ NO cron-like database functions** - schedule jobs through graphile-worker
- **❌ NO direct database cleanup functions** - implement as worker tasks

## ✅ REQUIRED PATTERNS

### GraphQL-First Architecture
- **✅ USE PostGraphile functions** for custom mutations and queries
- **✅ USE PostgreSQL functions** with `SECURITY DEFINER` for business logic
- **✅ USE GraphQL mutations** for all user actions
- **✅ EXPOSE functions** via PostGraphile's automatic schema generation

### Database Schema Best Practices
- **✅ USE `app_private` schema** for sensitive authentication data
- **✅ USE PostgreSQL ENUMs** instead of TEXT with CHECK constraints
- **✅ USE TIMESTAMPTZ columns** instead of boolean flags
- **✅ USE `current.sql`** as the single source of truth for schema
- **✅ USE Row Level Security (RLS)** for data access control

### Background Processing
- **✅ USE graphile-worker** for all background tasks
- **✅ USE worker jobs** for email sending, cleanup, notifications
- **✅ USE scheduled jobs** for periodic maintenance tasks
- **✅ IMPLEMENT task handlers** in the worker service

### Authentication Patterns
- **✅ USE PostgreSQL functions** for authentication logic
- **✅ USE `app_private` schema** for credentials and sessions
- **✅ USE PostGraphile's pgSettings** for user context
- **✅ USE RLS policies** with `current_setting('app.current_user_id')`

## Testing

- Write unit tests for all services
- Use Vitest for testing framework
- Mock external dependencies with Effect-TS
- Test error scenarios and edge cases

## File Organization

```
src/
├── services/         # Effect-TS services
├── types/           # Backend-specific types
├── utils/           # Utility functions
└── server.ts        # Express server setup
```
