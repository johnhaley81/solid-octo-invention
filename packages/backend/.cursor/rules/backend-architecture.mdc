---
description: Backend architecture and development guidelines for PostGraphile + Effect-TS
globs: ["packages/backend/**/*"]
alwaysApply: true
---

# Backend Development Guidelines

## Architecture

The backend uses the Graphile stack with Effect-TS for functional programming:

- **PostGraphile**: Automatic GraphQL API generation from PostgreSQL schema
- **Graphile Worker**: Background job processing
- **Graphile Migrate**: Database schema management
- **Effect-TS**: Functional programming and type-safe effects

## Service Layer Pattern

All business logic should be implemented as Effect-TS services:

```typescript
import { Effect, Context } from 'effect';

// Define service interface
export interface DatabaseService {
  readonly query: (text: string, params?: unknown[]) => Effect.Effect<unknown[], DatabaseError>;
}

// Service tag for dependency injection
export const DatabaseService = Context.GenericTag<DatabaseService>('DatabaseService');

// Implementation
export const makeDatabaseService = (): DatabaseService => ({
  query: (text, params) => 
    Effect.tryPromise({
      try: () => pool.query(text, params),
      catch: (error) => new DatabaseError('Query failed', error),
    }),
});
```

## Error Handling

Use tagged errors with Effect-TS:

```typescript
export class DatabaseError extends Error {
  readonly _tag = 'DatabaseError';
  public readonly errorCause?: unknown;
  
  constructor(message: string, cause?: unknown) {
    super(message);
    this.errorCause = cause;
  }
}
```

## Database Guidelines

- Use PostgreSQL with Row Level Security (RLS)
- Implement proper indexes and constraints
- Use UUID primary keys for better distribution
- Add automatic timestamps with triggers
- Keep schema simple and focused on core domain

### Migration Management (CRITICAL)

**All database schema changes MUST be consolidated in `current.sql`:**

- **‚úÖ USE `current.sql`** as the single source of truth for all schema changes
- **‚ùå NO separate migration files** - everything goes in `current.sql`
- **‚ùå NO individual `.sql` files** for features - consolidate into `current.sql`
- **‚úÖ ORGANIZE `current.sql`** with clear sections and comments
- **‚úÖ USE Graphile Migrate** to commit migrations when ready for production

**CRITICAL: ALL MIGRATIONS MUST BE IDEMPOTENT**

Every SQL statement in `current.sql` MUST be safe to run multiple times:

- **‚úÖ USE `IF NOT EXISTS`** for CREATE statements:
  ```sql
  ALTER TABLE users ADD COLUMN IF NOT EXISTS deleted_at TIMESTAMPTZ DEFAULT NULL;
  CREATE INDEX IF NOT EXISTS users_active_idx ON users (id) WHERE deleted_at IS NULL;
  ```

- **‚úÖ USE `CREATE OR REPLACE`** for functions:
  ```sql
  CREATE OR REPLACE FUNCTION app_private.soft_delete_record(...)
  ```

- **‚úÖ USE `DROP IF EXISTS` before CREATE** for policies and triggers:
  ```sql
  DROP POLICY IF EXISTS users_select_policy ON users;
  CREATE POLICY users_select_policy ON users FOR SELECT USING (deleted_at IS NULL);
  
  DROP TRIGGER IF EXISTS prevent_users_hard_delete ON users;
  CREATE TRIGGER prevent_users_hard_delete BEFORE DELETE ON users ...;
  ```

**Why idempotency matters:**
- Migrations can be safely re-run during development
- CI/CD pipelines won't fail on repeated deployments
- Database state remains consistent across environments
- Prevents "already exists" errors that break deployments

### Soft Delete Pattern (REQUIRED)

**All tables MUST implement soft deletes using `deleted_at TIMESTAMPTZ` instead of hard deletes:**

```sql
-- Every table must include this column
deleted_at TIMESTAMPTZ DEFAULT NULL
```

**Key principles:**
- Hard deletes are prohibited - use `deleted_at = NOW()` instead
- All tables have triggers that prevent accidental hard deletes
- Use `@graphile-contrib/pg-omit-archived` for automatic GraphQL filtering
- RLS policies must respect soft delete status
- Create partial indexes for performance: `WHERE deleted_at IS NULL`

**Database functions available (in app_private schema):**
- `app_private.soft_delete_record(table_name, record_id)` - Soft delete a record
- `app_private.restore_record(table_name, record_id)` - Restore a soft deleted record
- `app_private.setup_soft_delete_for_table(table_name)` - Set up infrastructure for new tables

**Effect-TS service methods:**
- `databaseService.softDelete(tableName, recordId)` - Soft delete via service
- `databaseService.restore(tableName, recordId)` - Restore via service
- `databaseService.permanentDelete(tableName, recordId)` - Permanent delete (admin only)

**When creating new tables:**
1. Include `deleted_at TIMESTAMPTZ DEFAULT NULL` column
2. Run `SELECT app_private.setup_soft_delete_for_table('your_table_name')` to add infrastructure
3. Or manually follow the template in `current.sql` (see soft delete section)

### PostGraphile Smart Comments (SECURITY CRITICAL)

**All tables in `app_public` schema MUST include appropriate `@omit` smart comments for security:**

```sql
-- REQUIRED: All future tables MUST include '@omit delete' to prevent
-- accidental hard deletes through the GraphQL API
COMMENT ON TABLE app_public.your_table IS 'Table description
@omit delete';

-- For sensitive tables, also omit create operations:
COMMENT ON TABLE app_public.sensitive_table IS 'Sensitive table description
@omit create,delete';
```

**Available `@omit` options:**
- `create`: Prevents INSERT operations via GraphQL
- `read`: Prevents SELECT operations via GraphQL  
- `update`: Prevents UPDATE operations via GraphQL
- `delete`: Prevents DELETE operations via GraphQL
- `all`: Prevents all CRUD operations via GraphQL

**Multiple operations can be omitted:** `@omit create,delete,update`

**SECURITY RULE:** All future tables MUST include `@omit delete` to prevent accidental hard deletes through the GraphQL API. Use soft delete patterns instead.

**For more PostGraphile smart comments:** https://www.graphile.org/postgraphile/smart-comments/

## üö´ PROHIBITED PATTERNS

### REST API Endpoints
- **‚ùå NO REST endpoints** - All API interactions must go through GraphQL
- **‚ùå NO Express routes** for business logic (except health checks)
- **‚ùå NO custom middleware** for authentication - use PostGraphile's built-in features
- **‚ùå NO `/api/*` routes** - everything should be accessible via `/graphql`

### Database Schema Violations
- **‚ùå NO boolean columns** - use `TIMESTAMPTZ` columns instead (e.g., `email_verified_at` not `email_verified`)
- **‚ùå NO TEXT columns with CHECK constraints** - use PostgreSQL ENUMs for better GraphQL type generation
- **‚ùå NO separate migration files** - all schema changes go in `current.sql`
- **‚ùå NO sensitive data in public schema** - use `app_private` schema for authentication tables
- **‚ùå NO hard deletes** - use soft delete pattern with `deleted_at TIMESTAMPTZ`
- **‚ùå NO helper functions in public schema** - put utility functions in `app_private` schema
- **‚ùå NO non-idempotent migrations** - all SQL in `current.sql` must be safe to run multiple times

### Background Processing Anti-patterns
- **‚ùå NO database functions for background tasks** - use graphile-worker jobs
- **‚ùå NO cron-like database functions** - schedule jobs through graphile-worker
- **‚ùå NO direct database cleanup functions** - implement as worker tasks

## ‚úÖ REQUIRED PATTERNS

### GraphQL-First Architecture
- **‚úÖ USE PostGraphile functions** for custom mutations and queries
- **‚úÖ USE PostgreSQL functions** with `SECURITY DEFINER` for business logic
- **‚úÖ USE GraphQL mutations** for all user actions
- **‚úÖ EXPOSE functions** via PostGraphile's automatic schema generation

### Database Schema Best Practices
- **‚úÖ USE `app_private` schema** for sensitive authentication data
- **‚úÖ USE PostgreSQL ENUMs** instead of TEXT with CHECK constraints
- **‚úÖ USE TIMESTAMPTZ columns** instead of boolean flags
- **‚úÖ USE `current.sql`** as the single source of truth for schema
- **‚úÖ USE Row Level Security (RLS)** for data access control

### Background Processing
- **‚úÖ USE graphile-worker** for all background tasks
- **‚úÖ USE worker jobs** for email sending, cleanup, notifications
- **‚úÖ USE scheduled jobs** for periodic maintenance tasks
- **‚úÖ IMPLEMENT task handlers** in the worker service

### Authentication Patterns
- **‚úÖ USE PostgreSQL functions** for authentication logic
- **‚úÖ USE `app_private` schema** for credentials and sessions
- **‚úÖ USE PostGraphile's pgSettings** for user context
- **‚úÖ USE RLS policies** with `current_setting('app.current_user_id')`

## Testing

- Write unit tests for all services
- Use Vitest for testing framework
- Mock external dependencies with Effect-TS
- Test error scenarios and edge cases

## File Organization

```
src/
‚îú‚îÄ‚îÄ services/         # Effect-TS services
‚îú‚îÄ‚îÄ types/           # Backend-specific types
‚îú‚îÄ‚îÄ utils/           # Utility functions
‚îî‚îÄ‚îÄ server.ts        # Express server setup
```
